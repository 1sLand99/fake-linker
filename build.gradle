/*
 * Copyright (c) 2021 fake-linker by sanfengAndroid.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'com.android.library'
}

def linkerModuleName = 'fake-linker'
def hookInstallModuleName = 'hook-install'
def mVersionCode = 1100
def mVersionName = "1.1"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode mVersionCode
        versionName mVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                cppFlags "-Werror"
                cFlags "-Werror"
                abiFilters.addAll(rootProject.abis)
                arguments "-DANDROID_PLATFORM=${rootProject.buildApi}", "-DLINKER_MODULE_NAME=${linkerModuleName}",
                        "-DMERGE_BUILD=${rootProject.mergeBuild}",
                        "-DHOOK_INSTALL_MODULE_NAME=${hookInstallModuleName}",
                        "-DHOOK_LOG_LEVEL=${rootProject.logLevel}",
                        "-DMODULE_VERSION=${mVersionCode}",
                        "-DMODULE_VERSION_NAME=\"${mVersionName}\""

            }
        }

        buildConfigField 'String', 'LINKER_MODULE_NAME', "\"${linkerModuleName}\""
        buildConfigField 'String', 'HOOK_INSTALL_MODULE_NAME', "\"${hookInstallModuleName}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
            externalNativeBuild {
                cmake {
                    cppFlags "-fvisibility=hidden -fvisibility-inlines-hidden -Os -fomit-frame-pointer -fno-rtti -fno-exceptions"
                    cFlags "-fvisibility=hidden -fvisibility-inlines-hidden -Os -fomit-frame-pointer"
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets{
        release{
            jniLibs.srcDirs = ["src/main/libs/release"]
        }
        debug{
            jniLibs.srcDirs = ["src/main/libs/debug"]
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    ndkVersion '22.0.7026061'
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('merge') && task.name.endsWith('JniLibFolders')) {
        task.doLast {
            it.outputs.files.files.each { File dir ->
                dir.eachFileRecurse {
                    if (it.name == "lib${linkerModuleName}-${rootProject.buildApi}.so") {
                        println 'delete current fake-linker version module'
                        it.delete()
                    }
                }
            }
        }
    }
}

dependencies {
}