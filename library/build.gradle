/*
 * Copyright (c) 2021 fake-linker by sanfengAndroid.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'com.android.library'
    id 'maven-publish'
}


android {
    compileSdk 34
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion rootProject.targetSdk
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                abiFilters.addAll(rootProject.abis)
                arguments '-DANDROID_PLATFORM=21',
                        "-DINSTALLER_MODULE_NAME=${rootProject.installerModuleName}",
                        "-DHOOK_LOG_LEVEL=${rootProject.logLevel}",
                        "-DMODULE_VERSION=${rootProject.versionCode}",
                        "-DMODULE_VERSION_NAME=${rootProject.versionName}"
            }
        }

        buildConfigField 'String', 'HOOK_INSTALL_MODULE_NAME', "\"${rootProject.installerModuleName}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
            externalNativeBuild {
                cmake {
                    cppFlags "-fvisibility=hidden -fvisibility-inlines-hidden -Os -fomit-frame-pointer"
                    cFlags "-fvisibility=hidden -fvisibility-inlines-hidden -Os -fomit-frame-pointer"
                }
            }
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    ndkVersion '25.1.8937393'
    namespace 'com.sanfengandroid.fakelinker'

    buildFeatures {
        prefabPublishing true
        buildConfig true
    }
    prefab {
        fakelinker {
            headers "src/main/cpp/include"
        }
    }
    publishing {
        multipleVariants {
            includeBuildTypeValues('debug', 'release')
            withJavadocJar()
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.default
                groupId = 'com.sanfengandroid'
                artifactId = 'fakelinker'
                version = rootProject.versionName
            }
        }
        repositories {
            maven {
                name = 'Local'
                url = "file://E:/maven-local/repo"
            }
        }
    }

}


tasks.configureEach { task ->
    if (task.name.startsWith('prefab') && !task.name.contains('Configure')) {
        task.doLast {
            it.outputs.files.files.each { File dir ->
                dir.eachFileRecurse {
                    if (it.name == 'prefab.json') {
                        var json = new JsonSlurper()
                        var prefab = json.parse(it, 'utf-8')
                        prefab['name'] = 'Fakelinker'
                        it.write(JsonOutput.prettyPrint(JsonOutput.toJson(prefab)))
                    }
//                    else if (it.name == 'abi.json') {
//                        var json = new JsonSlurper()
//                        var abi = json.parse(it, 'utf-8')
//                        abi['stl'] = 'none'
//                        it.write(JsonOutput.prettyPrint(JsonOutput.toJson(abi)))
//                    }
                }
            }
        }
    }
}

dependencies {
    compileOnly(project(':Stub'))
}