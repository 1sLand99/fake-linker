/*
 * Copyright (c) 2021 fake-linker by sanfengAndroid.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdk 34
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion rootProject.targetSdk
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                abiFilters.addAll(rootProject.abis)
                arguments "-DFAKELINKER_INSTALLER_MODULE_NAME=${rootProject.installerModuleName}",
                        "-DFAKELINKER_LOG_LEVEL=${rootProject.logLevel}",
                        "-DFAKELINKER_MODULE_VERSION=${rootProject.versionCode}",
                        "-DFAKELINKER_MODULE_VERSION_NAME=${rootProject.versionName}"
            }
        }

        buildConfigField 'String', 'HOOK_INSTALL_MODULE_NAME', "\"${rootProject.installerModuleName}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            // add stub class
            java.srcDirs += 'src/stub/java'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    ndkVersion '26.3.11579264'
    namespace 'com.sanfengandroid.fakelinker'

    buildFeatures {
        prefabPublishing true
        buildConfig true
    }
    prefab {
        fakelinker {
            headers "src/main/cpp/include"
        }
        fakelinker_static {
            headers "src/main/cpp/include"
        }
    }

    publishing {
        multipleVariants {
            includeBuildTypeValues('debug', 'release')
            withJavadocJar()
        }
    }
}

def removeFiles = [
        'dalvik/system'
]

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.default
                groupId = 'com.sanfengandroid'
                artifactId = 'fakelinker'
                version = rootProject.versionName
            }
        }
        repositories {
            maven {
                name = 'Local'
                url = "file://E:/maven-local/repo"
            }
        }
    }
    tasks.named('compileReleaseJavaWithJavac') {
        doLast {
            def dir = it.destinationDirectory.get().asFile
            removeFiles.each {
                def file = new File(dir, it)
                if (file.exists()) {
                    delete file
                }
            }
        }
    }
}


tasks.configureEach { task ->
    if (task.name.startsWith('prefab') && !task.name.contains('Configure')) {
        task.doLast {
            it.outputs.files.files.each { File dir ->
                dir.eachFileRecurse {
                    if (it.name == 'prefab.json') {
                        var json = new JsonSlurper()
                        var prefab = json.parse(it, 'utf-8')
                        prefab['name'] = 'Fakelinker'
                        it.write(JsonOutput.prettyPrint(JsonOutput.toJson(prefab)))
                    } else if (it.name == 'abi.json') {
                        var json = new JsonSlurper()
                        var abi = json.parse(it, 'utf-8')
                        abi['stl'] = 'none'
                        it.write(JsonOutput.prettyPrint(JsonOutput.toJson(abi)))
                    }
                }
                // 删减动态库版本多余的头文件
                File includeDir = new File(dir, 'modules/fakelinker/include')
                def keepFiles = ['linker_macros.h', 'fake_linker.h', 'linker_version.h']
                includeDir.eachFile {
                    if (!keepFiles.contains(it.name)) {
                        it.delete()
                    }
                }
            }
        }
    } else if (task.name.startsWith('copy') && task.name.contains('JniLibsProjectAndLocalJars')) {
        // 在这里删除 aar 包中的 jni 目录,它与 prefab 重复了,不能直接排除 lib 目录否则其它项目直接引用该项目导致
        // 库也会被删除
        task.doLast {
            it.outputs.files.files.each { dir ->
                dir.deleteDir()
            }
        }
    }
}

dependencies {
    compileOnly(project(':Stub'))
}